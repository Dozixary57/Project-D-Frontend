                        /*
                            interface DocumentWithViewTransition extends Document {
                                startViewTransition: (callback: () => Promise<void>) => any;
                            }
                            const documentWithViewTransition = document as DocumentWithViewTransition;
                        */

                                /*
                                                                documentWithViewTransition.startViewTransition(async () => {
                                                                    flushSync(() => {
                                */
                                // setIntroductionView( prevVariable => !prevVariable)
                                /*                                    });
                                                                });*/




import { createSlice } from "@reduxjs/toolkit";
import {stat} from "fs";
const initialState:any[] = []
export const favoriteObjectsSlice = createSlice({
    name: 'FavoriteObjects',
    initialState,
    reducers: {
        toggleGameObjectFavorites: (state, {payload}) => {
            const isExist = state.some(t => t.Title === payload.Title)
            const gameObjectPageLink = payload;
            if (isExist) {
                state = state.filter(t => t.Title !== payload.Title)
            }
            else state.push(payload)
        }
    }
})
export const { actions, reducer } = favoriteObjectsSlice